import{_ as s,c as a,o as n,S as l}from"./chunks/framework.9c4db3f7.js";const A=JSON.parse('{"title":"vue 相关","description":"","frontmatter":{},"headers":[],"relativePath":"fe/framework/vue.md","filePath":"fe/framework/vue.md","lastUpdated":1703557805000}'),p={name:"fe/framework/vue.md"},e=l(`<h1 id="vue-相关" tabindex="-1">vue 相关 <a class="header-anchor" href="#vue-相关" aria-label="Permalink to &quot;vue 相关&quot;">​</a></h1><h2 id="初次渲染过程" tabindex="-1">初次渲染过程 <a class="header-anchor" href="#初次渲染过程" aria-label="Permalink to &quot;初次渲染过程&quot;">​</a></h2><p><code>new vue</code> =&gt; <code>init</code> =&gt; <code>$mount</code> =&gt; <code>compile(编译)</code> =&gt; <code>render</code> =&gt; <code>vnode</code> =&gt; <code>patch</code> =&gt; <code>dom</code></p><ol><li><p>初始化一个 vue 实例，以及一系列的相关环境（合并配置、生命周期、watcher 等等）</p></li><li><p>$mount：</p><ul><li>挂载元素会被替换了，vue 不能在 <code>body</code> 和 <code>html</code> 标签上</li><li>Vue 的组件的渲染最终都需要 render 方法，是一个“在线编译”的过程；</li></ul></li><li><p>compile(编译)：</p><ul><li>如果有 template 会将它编译成 render 函数</li><li>扩展：vue 在挂载的时候会判断是否有 render 函数，如果有就不编译 template</li><li>扩展：普通的 <code>.vue</code> 文件中最上面的 template 为什么优先于 render 函数 ？</li><li><code>.vue</code> 文件的会经过处理的，在 webpack 编译阶段 <code>.vue</code> 文件经过 vue-loader 处理， 把 template 标签在最终后被编译成 render 函数，然后添加在对象组件上，所以你运行组件时候其实只有render函数，并没有 template</li></ul></li><li><p>渲染 Watcher （挂载的时候添加的）</p><ul><li>给实例注册一个渲染 Watcher，渲染 watcher 拥有一个回调，该回调函数会在初始化和每次 vm 实例更新时触发</li><li>初始化的时候会执行回调函数;</li><li>当 vm 实例中的监测的数据发生变化的时候执行回调函数</li></ul></li><li><p>render 过程</p><ul><li>利用 render 函数创建 vnode（在 render 过程中每一个模板节点（DOM 节点）都会生成对应的 _c，也就是执行 createElement 函数来创建 vnode）</li><li>从根 vnode （root vnode）开始创建（处理一些边界值 textVnode（文本节点），emptyVnode（空节点）、注释节点 等等）</li><li>摊平所有 children vnode 成一维数组<code>（children 拍平成一维数组就是为了建立好 tree 的数据结构，因为对于 tree 来说，每个节点的 children 就是一维数组）</code></li><li>最终生成一个 vnode tree</li></ul></li><li><p>开始执行 patch 过程</p><ol><li><p>调用 <code>createElement()</code> 判断当前节点是否是 tag（参数：<code>vnode</code>、<code>parentElm(父节点)</code> 等）</p></li><li><p>如果不是tag：就直接用 <code>createTextNode()</code> 创建 <code>文本 DOM</code> ，通过 <code>insert</code> 插入父 vnode</p></li><li><p>如果是 tag：生成 <strong>当前 vnode 的占位符</strong>，然后调用 <code>createChildren()</code> 创建子节点</p></li><li><p>每个节点的 children 就是一般是一维数组，然后循环调用 <code>createElement()</code>，也就是 步骤 1，递归</p><ul><li>也有元素的文本节点，通过 appendChild 直接插入节点</li></ul></li><li><p><code>createChildren()</code> 执行完后，<strong>创建当前 <code>vnode占位符</code> 的对应的 DOM 并把它插入父 vnode</strong></p></li><li><p>最后递归完成到该 <code>vnode占位符</code> 的渲染 vnode（组件的 root vnode 根节点，template标签下面的一级），并完成它的 patch。</p></li></ol><ul><li>patch 的递归过程是一个自上而下的过程，但是插入到 DOM 节点的顺序是自下而上，也就是子节点先插入，父节点后插入。</li></ul></li></ol><ul><li>createElement（render 函数的参数） <ul><li>children 的规范化：遍历把 children 的节点变成一个一维的 vnode 数组</li><li>把他们都标准化为数组，为了后续 patch 过程中统一处理遍历用的。</li><li>对 tag 进行判断，如果是字符串类型，继续判断是否系统保留标签，如果是则直接创建一个普通 VNode</li><li>如果是为已注册的组件名，则通过 createComponent 函数，创建一个组件类型的 VNode</li><li>最终返回一个 VNode</li><li>render 函数是从最内层开始执行，函数的执行先对参数取值，也就是先执行 children</li></ul></li></ul><h2 id="组件-patch-过程" tabindex="-1">组件 patch 过程 <a class="header-anchor" href="#组件-patch-过程" aria-label="Permalink to &quot;组件 patch 过程&quot;">​</a></h2><p><a href="https://coding.imooc.com/learn/questiondetail/AKpB2XJAyRgYbv0E.html" target="_blank" rel="noreferrer">patch 流程</a></p><p>暂时理解： 简单的理解，组件化的实现过程就是一个递归 new Vue 的过程， new Vue 后就是一个 init -&gt; render -&gt; patch 的过程， 而 patch 就是把 render 生成的 vnode 转换成真实 DOM 的过程，vnode 又分普通的 vnode 和组件 vnode，patch 过程中遇到了组件 vnode， 就会根据这个组件 vnode 再次执行 new Vue 的过程。</p><h2 id="响应式对象" tabindex="-1">响应式对象 <a class="header-anchor" href="#响应式对象" aria-label="Permalink to &quot;响应式对象&quot;">​</a></h2><h3 id="设置响应式对象的流程" tabindex="-1">设置响应式对象的流程 <a class="header-anchor" href="#设置响应式对象的流程" aria-label="Permalink to &quot;设置响应式对象的流程&quot;">​</a></h3><ol><li><p>initData 的时候调用 <code>observe</code>，并把 data 传过去： <code>observe(data, true /* asRootData */)</code></p></li><li><p><code>observe</code> 方法一系列判断，然后创建一个 Observer 实例 <code>new Observer()</code></p><ul><li>是否是对象、是否是 Vnode、</li><li>对象有 <code>__ob__</code>属性：直接返回 <code>value.__ob__</code></li><li>没有 <code>__ob__</code>：则通过 def() 也就是 Object.defineProperty 添加不可以枚举 <code>__ob__</code> 属性 并把 this 赋值给他</li><li><strong>如果是数组，就重写数组的方法（push、pop、shift 等）</strong></li></ul></li><li><p>Observer 类会区分 value 是数组或者对象，然后循环或递归调用 <code>defineReactive()</code> 函数，给对象添加 getter 和 setter</p><ul><li>如果发现子属性也为对象则会递归调用 observer 方法，第 2 步骤，把该对象变成响应式</li></ul></li><li><p><code>defineReactive()</code> 实际上调用 <code>Object.defineProperty</code> 方法，变成响应式也就是给对象添加 getter 和 setter</p><ul><li>如果有 <code>shallow</code> 参数，也就是有子属性，继续递归调用 observer 方法，先把子属性变成响应式的</li><li>先子属性变成响应式，然后在当前属性，当前属性对子属性有依赖 <code>childOb</code></li><li><code>childOb</code> 是为 <code>Vue.$set</code> 量身定制的</li><li>如果有 <code>childOb</code> 会调用 <code>childOb.dep.depend()</code> 进行子属性依赖收集</li></ul></li></ol><h3 id="依赖收集" tabindex="-1">依赖收集 <a class="header-anchor" href="#依赖收集" aria-label="Permalink to &quot;依赖收集&quot;">​</a></h3><ul><li><p>依赖收集就是 订阅数据变化的 <code>watcher</code> 的收集</p><ul><li>在 $mount 时候调用 <code>new Watcher</code> 然后调用 <code>vm._render()</code>，所以会触发所有的 <code>getter</code></li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;">  updateComponent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">_update</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">_render</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">hydrating</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Watcher</span><span style="color:#A6ACCD;">(vm</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> updateComponent</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> noop</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/* isRenderWatcher */</span><span style="color:#A6ACCD;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>在定义响应式对象的的 <code>getter</code> 函数里，触发 <code>dep.depend</code> 做依赖收集， 将获取属性的地方全部加入订阅者列表中，当数据发生变化时，通过遍历订阅者列表实现变更发布。</p></li><li><p>再次 render 时会先做依赖清除，再次进行新的依赖收集，这样做是为了处理v-if条件渲染的数据不用再派发更新了</p></li></ul><blockquote><p>那么为什么需要做 deps 订阅的移除呢，在添加 deps 的订阅过程，已经能通过 id 去重避免重复订阅了。</p></blockquote><blockquote><p>考虑到一种场景，我们的模板会根据 v-if 去渲染不同子模板 a 和 b，当我们满足某种条件的时候渲染 a 的时候，会访问到 a 中的数据，这时候我们对 a 使用的数据添加了 getter，做了依赖收集， 那么当我们去修改 a的数据的时候，理应通知到这些订阅者。那么如果我们一旦改变了条件渲染了 b 模板，又会对 b 使用的数据添加了 getter，如果我们没有依赖移除的过程，那么这时候我去修改 a 模板的数据，会通知 a 数据的订阅的回调，这显然是有浪费的。</p></blockquote><blockquote><p>因此 Vue 设计了在每次添加完新的订阅，会移除掉旧的订阅，这样就保证了在我们刚才的场景中，如果渲染 b 模板的时候去修改 a 模板的数据，a 数据订阅回调已经被移除了，所以不会有任何浪费，真的是非常赞叹 Vue 对一些细节上的处理。</p></blockquote><h3 id="派发更新" tabindex="-1">派发更新 <a class="header-anchor" href="#派发更新" aria-label="Permalink to &quot;派发更新&quot;">​</a></h3><ol><li><p>修改响应的数据，会触发 setter 的逻辑，最后调用 <code>dep.notify()</code> 方法</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Dep</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">notify</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// stabilize the subscriber list first</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">subs</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">subs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">l</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">subs</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">l</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">subs</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">update</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p>遍历所有的 <code>subs</code> ，也就是 <code>watcher</code> 的实例，然后调用每一个 <code>watcher</code> 的 <code>update</code> 方法</p></li><li><p><code>watcher</code> 先添加到一队列里面，然后 <code>nextTick</code> 后，进行排序</p><ul><li><code>queue.sort((a, b) =&gt; a.id - b.id)</code> 对队列做了从小到大的排序，这么做主要有以下要确保以下几点：</li></ul><ol><li>组件的更新由父到子；因为父组件的创建过程是先于子的，所以 watcher 的创建也是先父后子，执行顺序也应该保持先父后子。</li><li>用户的自定义 watcher 要优先于渲染 watcher 执行；因为用户自定义 watcher 是在渲染 watcher 之前创建的。</li><li>如果一个组件在父组件的 watcher 执行期间被销毁，那么它对应的 watcher 执行都可以被跳过，所以父组件的 watcher 应该先执行。</li></ol></li><li><p>遍历队列，拿大相对于应的 <code>watcher</code> ， 执行 <code>watcher.run()</code></p></li><li><p><code>watcher.run()</code> 会执行 <code>watcher</code> 的回调函数</p><ul><li><code>渲染 watcher</code> ：就执行在执行 this.get() 方法求值的时候，会执行 getter 方法</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">updateComponent</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">_update</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">_render</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">hydrating</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>接着会执行 <code>path</code> 的过程，这就是修改相关的响应式数据时候，会触发重新渲染的原因，</li><li>user watcher 就是直接执行 回调函数</li></ul></li></ol><h3 id="检查数组变化的主意事项" tabindex="-1">检查数组变化的主意事项 <a class="header-anchor" href="#检查数组变化的主意事项" aria-label="Permalink to &quot;检查数组变化的主意事项&quot;">​</a></h3><p>使用 <code>this.$set</code> 方法 $set 方法最后会执行 <code>ob.dep.notify()</code> 手动做一次通知订阅者</p><ol><li><code>$set</code> 方法判断该 <code>key</code> 已经存在与 <code>target</code> 中，就直接赋值返回，因为这样的变化是可以被检测的</li><li>如果判断 target 是否是个响应式的 <ul><li>如果是 接着再获取到 <code>target.__ob__</code> 并赋值给 <code>ob</code></li><li>如果不是，就直接把 key 赋值给 target 并直接返回</li></ul></li><li>最后通过 <code>defineReactive(ob.value, key, val)</code> 把新添加的属性变成响应式属性</li><li>调用 <code>ob.dep.motify()</code> 手动触发依赖通知</li></ol><h2 id="defineproperty-与-proxy" tabindex="-1">defineProperty 与 Proxy <a class="header-anchor" href="#defineproperty-与-proxy" aria-label="Permalink to &quot;defineProperty 与 Proxy&quot;">​</a></h2><p><a href="https://cloud.tencent.com/developer/article/1590851" target="_blank" rel="noreferrer">为什么Vue3.0不再使用defineProperty实现数据监听？</a></p><h3 id="无法监控到数组下标的变化" tabindex="-1">无法监控到数组下标的变化？ <a class="header-anchor" href="#无法监控到数组下标的变化" aria-label="Permalink to &quot;无法监控到数组下标的变化？&quot;">​</a></h3><p>事实上，Object.defineProperty 本身是可以监控到数组下标的变化的，只是在 Vue 的实现中，从性能/体验的性价比考虑，放弃了这个特性。</p><p>Object.defineProperty 在数组中的表现和在对象中的表现是一致的，数组的索引就可以看做是对象中的 key。</p><ol><li><p>通过索引访问或设置对应元素的值时，可以触发 getter 和 setter 方法</p></li><li><p>通过 push 或 unshift 会增加索引，对于新增加的属性，需要再手动初始化才能被observe。</p></li><li><p>通过 pop 或 shift 删除元素，会删除并更新索引，也会触发 setter 和 getter 方法。</p></li></ol><p>所以，Object.defineProperty 是有监控数组下标变化的能力的，只是vue2.x放弃了这个特性。</p><h2 id="计算属性-与-监听属性" tabindex="-1">计算属性 与 监听属性 <a class="header-anchor" href="#计算属性-与-监听属性" aria-label="Permalink to &quot;计算属性 与 监听属性&quot;">​</a></h2><p><strong>计算属性</strong></p><p><a href="https://segmentfault.com/a/1190000022922481" target="_blank" rel="noreferrer">彻底理解计算属性</a></p><p>一个例子 🌰 ：</p><details><summary>点击查看</summary><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      a</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      b</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">computed</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">c</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a0</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#FF9CAC;">false</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">b</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">created</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">this.c</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">c</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mounted</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">b</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">this.c</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">c</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div></details><p>简单流程：</p><ol><li><code>computed</code> 初始化：会对 <code>this.c</code> 做响应式处理， <ol><li>也就是并例化 <code>watcher</code>，创建 <code>computedWatcher</code>，默认 { lazy: true } 也就是惰性的</li></ol></li><li>当访问到 <code>this.c</code> 的时候，代码会执行到 <code>this.a</code> 时： <ol><li><code>this.a</code> 的 dep 就会收集依赖当前 <code>computedWatcher</code> 也就是 c ；c 也会订阅 a</li></ol></li><li>代码没有执行到，不会触发 this.b 依赖收集，也就是 b 在更新的时候 c 不会重新求值</li></ol><p>求值流程：</p><p>c 初始化时候，会求值，并且 dirty = false 惰性</p><p>接下来如果访问 c：</p><p>1、c的依赖没有更新，那么不会求值，返回初始化的值 2、c的依赖 a 更新，a 触发 notify， dirty = true，c 重新求值</p><ul><li><p>计算属性被访问的时触发 getter 函数，执行用户返回的计算结果， 如果返回值发生来变化才触发更新（有缓存，依赖发生变化才执行）</p></li><li><p>依赖属性更新：计算属性会成为，依赖属性的订阅者，依赖变量发生变化改变则触发计算属性重新计算</p></li><li><p>计算属性有 lazy 和 active 两种模式，</p><ul><li>active 模式：依赖更新立即计算，</li><li>dirty 模式：依赖变化仅设置 this.dirty = true，等访问计算属性时再重新计算，并加入缓存。</li></ul></li><li><p>视频版本的计算属性实现思想是——多计算，少更新，也就是每次都去计算，只有计算结果变了，才会去触发更新，比如一个计算属性有多个依赖发生变化，但是它们最终计算的结果没变，是不会触发更新的。</p></li><li><p>最新版本的计算属性实现思想是——少计算，多更新，一旦计算属性的依赖发生变化，不管最终计算的结果有没有变化，都会触发更新。</p></li></ul><p><strong>监听属性</strong></p><ul><li>监听属性相当于主动订阅了属性的变化，属性发生变化时执行回调函数</li><li>监听属性的watcher执行优先级高于渲染watcher；</li><li>deep 设置为 true 用于监听对象内部值的变化，会递归访问对象的每个属性从而做到依赖收集</li><li>immediate 设置为 true 将立即以表达式的当前值触发回调</li></ul><p>为啥computed不需要deep ？</p><ul><li>主动触发和被动触发的区别</li><li>计算属性是主动触发、只要你使用就会调用回调函数；</li><li>watch是被动触发，只有监听到变化才会调用回调函数。</li></ul><p>在这里着重提一点const computedWatcherOptions = { lazy: true },可以看到这个配置在创建Watcher时被导入，这个配置也是computed与watch的最大区别。</p><p>我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是计算属性是基于它们的响应式依赖进行缓存的。只在相关响应式依赖发生改变时它们才会重新求值。</p><h3 id="计算属性-vs-监听属性-从应用场景看" tabindex="-1">计算属性 vs 监听属性 从应用场景看 <a class="header-anchor" href="#计算属性-vs-监听属性-从应用场景看" aria-label="Permalink to &quot;计算属性 vs 监听属性 从应用场景看&quot;">​</a></h3><p>计算属性：适合用在模板渲染中，某个值是依赖了其它的响应式对象甚至是计算属性计算而来；</p><p>侦听属性适：用于观测某个值的变化去完成一段复杂的业务逻辑（例如执行异步或开销较大的操作）。</p><h2 id="组件更新-diff-流程" tabindex="-1">组件更新 (diff 流程) <a class="header-anchor" href="#组件更新-diff-流程" aria-label="Permalink to &quot;组件更新 (diff 流程)&quot;">​</a></h2><ol><li><p>数据发生变化，触发 watcher 的回调函数 <code>vm._update</code> 方法，进行组件的更新过程</p><ul><li><code>vm._update</code> 会调用 <code>vm._render()</code> 函数创建新的 <code>vonde</code></li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">updateComponent</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">_update</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">_render</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">hydrating</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Watcher</span><span style="color:#A6ACCD;">(vm</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> updateComponent</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> noop</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">before</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_isMounted</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">callHook</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">beforeUpdate</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/* isRenderWatcher */</span><span style="color:#A6ACCD;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p><code>vm._update</code> 会执行 <code>vm.__patch__(prevVnode, vnode)</code> 方法，也就是调用 <code>patch</code> 函数</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">_update</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">vnode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNode</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">hydrating</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Component</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">prevVnode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_vnode</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">prevVnode</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">     </span><span style="color:#676E95;font-style:italic;">// initial render 初次渲染</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">$el</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">__patch__</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">$el</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vnode</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">hydrating</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">/* removeOnly */</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// updates 数据更新渲染</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">$el</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">__patch__</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">prevVnode</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vnode</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><p>patch 的逻辑和首次渲染不一样，因为 oldVnode 不为空（并且 oldVnode和 vnode 都是 vonode类型） 接下来通过 <code>sameVNode</code> 逻辑</p></li><li><p><code>sameVNode(oldVnode, vnode)</code> 判断它们是否是相同的 VNode 来决定走不同的更新逻辑</p></li><li><p>新旧节点不同</p><ul><li>创建新节点</li><li>更新父的占位节点</li><li>删除旧的节点</li></ul></li><li><p>新旧节点相同 执行 patchVnode，patchVnode 的作用就是把新的 vnode patch 到旧的 vnode 上</p><ul><li>执行 prepatch 钩子函数，执行 updateChildComponent 方法 <ul><li>updateChildComponent 逻辑： 由于更新了 vnode，那么 vnode 对应的实例 vm 的一系列属性也会发生变化， 包括占位符 vm.$vnode 的更新、slot 的更新，listeners 的更新，props 的更新等等。</li></ul></li><li>执行 update 钩子函数</li><li>完成 patch 过程</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> oldCh </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> oldVnode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">children</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> ch </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> vnode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">children</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#82AAFF;">isDef</span><span style="color:#A6ACCD;">(data) </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">isPatchable</span><span style="color:#A6ACCD;">(vnode)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">cbs</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">update</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">cbs</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">update</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">](</span><span style="color:#A6ACCD;">oldVnode</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vnode</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#82AAFF;">isDef</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hook</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">isDef</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">update</span><span style="color:#F07178;">)) </span><span style="color:#82AAFF;">i</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">oldVnode</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vnode</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#82AAFF;">isUndef</span><span style="color:#A6ACCD;">(vnode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">text)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 场景 1</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#82AAFF;">isDef</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">oldCh</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">isDef</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">ch</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">oldCh</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ch</span><span style="color:#F07178;">) </span><span style="color:#82AAFF;">updateChildren</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">elm</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldCh</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ch</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">insertedVnodeQueue</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">removeOnly</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 场景 2</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#82AAFF;">isDef</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">ch</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#82AAFF;">isDef</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">oldVnode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">text</span><span style="color:#F07178;">)) </span><span style="color:#A6ACCD;">nodeOps</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setTextContent</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">elm</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">addVnodes</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">elm</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ch</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ch</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">insertedVnodeQueue</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 场景 3</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#82AAFF;">isDef</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">oldCh</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">removeVnodes</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">elm</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldCh</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldCh</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 场景 4</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#82AAFF;">isDef</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">oldVnode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">text</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">nodeOps</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setTextContent</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">elm</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 场景 5</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (oldVnode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">text </span><span style="color:#89DDFF;">!==</span><span style="color:#A6ACCD;"> vnode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">text) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">nodeOps</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setTextContent</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">elm</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vnode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">text</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>如果 vnode 是个文本节点且新旧文本不相同，则直接替换文本内容。如果不是文本节点，则判断它们的子节点，并分了几种情况处理：</p><ol><li><code>oldCh 旧子节点</code> 与 <code>ch 新子节点</code> 都存在切不相等：使用 <code>updateChildren</code> 函数更新节点</li><li>只有 <code>ch 新子节点</code> 存在：表示就节点不需要，如果旧的节点是文本节点，先将节点的文本清除， 然后通过 addVnodes 将 ch 批量添加到 elm 下</li><li>如果只有 <code>oldCh</code> 存在，表示更新的是空节点，则需要将旧的节点通过 removeVnodes 全部清除。</li><li>当只有旧节点是文本节点的时候，则清除其节点文本内容。</li><li>如果是文本节点，就直接替换文本内容，</li></ol></li></ol><h3 id="数据发生变化" tabindex="-1">数据发生变化 <a class="header-anchor" href="#数据发生变化" aria-label="Permalink to &quot;数据发生变化&quot;">​</a></h3><p>触发渲染 watcher 的回调函数，进行组件的更新过程</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">updateComponent</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">_update</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">_render</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">hydrating</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Watcher</span><span style="color:#A6ACCD;">(vm</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> updateComponent</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> noop</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">before</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_isMounted</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">callHook</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">beforeUpdate</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/* isRenderWatcher */</span><span style="color:#A6ACCD;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="判断新旧节点-vnode-samevnode" tabindex="-1">判断新旧节点（vnode） sameVnode <a class="header-anchor" href="#判断新旧节点-vnode-samevnode" aria-label="Permalink to &quot;判断新旧节点（vnode） sameVnode&quot;">​</a></h3><ol><li>首先不是一个真实的dom 标签</li><li>sameVnode 方法<div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sameVnode</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">      (</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tag</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tag</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">isComment</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">isComment</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">isDef</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">isDef</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">sameInputType</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      ) </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">isTrue</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">isAsyncPlaceholder</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">asyncFactory</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">asyncFactory</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">isUndef</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">asyncFactory</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      )</span></span>
<span class="line"><span style="color:#F07178;">    )</span></span>
<span class="line"><span style="color:#F07178;">  )</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><ul><li>如果两个 vnode 的 key 不相等，则是不同</li><li>否则继续判断对于同步组件，则判断 isComment、data、input 类型等是否相同</li><li>对于异步组件，则判断 asyncFactory 是否相同。</li></ul></li></ol><h3 id="新旧节点不同的情况" tabindex="-1">新旧节点不同的情况 <a class="header-anchor" href="#新旧节点不同的情况" aria-label="Permalink to &quot;新旧节点不同的情况&quot;">​</a></h3><ol><li>创建新的节点</li><li>更新父的占位符节点</li><li>删除就旧的节点</li></ol><h3 id="新旧节点相同的情况" tabindex="-1">新旧节点相同的情况 <a class="header-anchor" href="#新旧节点相同的情况" aria-label="Permalink to &quot;新旧节点相同的情况&quot;">​</a></h3><p>会执行 patchVnode</p><h3 id="组件的-diff-算法" tabindex="-1">组件的 diff 算法 <a class="header-anchor" href="#组件的-diff-算法" aria-label="Permalink to &quot;组件的 diff 算法&quot;">​</a></h3><p>基本思路是 <code>双端比较的方式</code></p><ul><li>这种方式的优势在于尽可能用一种较少的 DOM 操作完成新旧子树(子节点)的更新。</li><li>而不是在于循环遍历次数导致的性能浪费。即使你顺序循环一次，也就是一个 O(n) 的复杂度，没有本质区别。</li></ul><h2 id="编译过程" tabindex="-1">编译过程 <a class="header-anchor" href="#编译过程" aria-label="Permalink to &quot;编译过程&quot;">​</a></h2><ul><li>解析模版字符串，生成 AST 语法树</li><li>优化 AST 语法树</li><li>生成 render 代码</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 解析模板字符串生成 AST</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> ast </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">parse</span><span style="color:#A6ACCD;">(template</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">trim</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> options)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 优化语法树</span></span>
<span class="line"><span style="color:#82AAFF;">optimize</span><span style="color:#A6ACCD;">(ast</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> options)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 生成代码</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> code </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">generate</span><span style="color:#A6ACCD;">(ast</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> options)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="parse" tabindex="-1">parse <a class="header-anchor" href="#parse" aria-label="Permalink to &quot;parse&quot;">​</a></h3><p>parse 的目标是把 template 模板字符串转换成 AST 树， 它是一种用 JavaScript 对象的形式来描述整个模板。那么整个 parse 的过程是利用正则表达式顺序解析模板， 当解析到开始标签、闭合标签、文本的时候都会分别执行对应的回调函数，来达到构造 AST 树的目的。</p><h3 id="_2-优化语法树" tabindex="-1">2. 优化语法树 <a class="header-anchor" href="#_2-优化语法树" aria-label="Permalink to &quot;2. 优化语法树&quot;">​</a></h3><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h3><h2 id="key-的作用" tabindex="-1">key 的作用 <a class="header-anchor" href="#key-的作用" aria-label="Permalink to &quot;key 的作用&quot;">​</a></h2><p>vue 的旧地服用原则</p><p><a href="https://coding.imooc.com/learn/questiondetail/195765.html" target="_blank" rel="noreferrer">key 的重要性</a></p><ul><li>加上 key 之后，当数据再次更新，新旧虚拟 dom 进行 diff 算法对比的时候，sameVnode 函数</li><li>如果发现 key 相同的两组 Vnode，就可以直接拿来复用，</li><li>而不用删除就节点后在创建新节点，提高 diff 算法效率</li><li>如果没有 key，会走 findIdxInOld 方法，去查处 vnode<div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">idxInOld </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">isDef</span><span style="color:#A6ACCD;">(newStartVnode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> oldKeyToIdx[newStartVnode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key]</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">findIdxInOld</span><span style="color:#A6ACCD;">(newStartVnode</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> oldCh</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> oldStartIdx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> oldEndIdx)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><h2 id="通讯的方式有" tabindex="-1">通讯的方式有 <a class="header-anchor" href="#通讯的方式有" aria-label="Permalink to &quot;通讯的方式有&quot;">​</a></h2><ol><li><p>props / $emit</p><ul><li>单向数据流</li><li>父组件通过 props 的方式向子组件传递数据</li><li>子组件通过 $emit 向父组件通讯</li></ul></li><li><p>$parent / $children</p><ul><li>通过 $parent 和 $children 来访问组件的实例，拿到组件的实例可以访问组件的方法和 data</li></ul></li><li><p>provide / inject （不会主动触发响应式） <a href="https://juejin.cn/post/6844903989935341581" target="_blank" rel="noreferrer">聊聊 Vue 中 provide/inject 的应用</a></p><ul><li>provide 提供变量</li><li>inject 来注入 provide 变量</li><li>不管子组件调用嵌套有多深，只要调用了inject 那么就可以注入provide中的数据， 而不局限于只能从当前父组件的props属性中回去数据</li></ul></li><li><p>ref / refs</p><ul><li>ref 绑定 组件</li><li>refs 访问绑定的组件的实例</li></ul></li><li><p>vuex</p><ul><li>待定</li></ul></li><li><p>$attrs / $listeners</p><ul><li>待定</li></ul></li></ol><h2 id="data-为什么是一个函数" tabindex="-1">data 为什么是一个函数 <a class="header-anchor" href="#data-为什么是一个函数" aria-label="Permalink to &quot;data 为什么是一个函数&quot;">​</a></h2><p>复用组件的时候，都会返回一份新的data，相当于每个组件实例都有自己私有的数据空间，不会共享同一个data对象。</p><ul><li>vue 为了保证每个实例上的 data 数据的独立性，规定了必须使用函数，而不是对象。</li><li>每个 vue 组件就是 vue 一个实例，vue 的 data 数据是 vue 原型上的属性</li><li>如果是对象，多个 data 引用是同一个内存地址，数据共享</li><li>使用函数后，data() 函数的 this 指向就是当前实例本身</li><li><a href="https://www.imqianduan.com/vue/192.html" target="_blank" rel="noreferrer">参考</a></li></ul><h2 id="props、data、computed-加载顺序" tabindex="-1">props、data、computed 加载顺序 <a class="header-anchor" href="#props、data、computed-加载顺序" aria-label="Permalink to &quot;props、data、computed 加载顺序&quot;">​</a></h2><p><code>props</code> ==&gt; <code>methods</code> ==&gt; <code>data</code> ==&gt; <code>computed</code> ==&gt; <code>watch</code></p><p>vue 中的源码</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">initState</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">vm</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_watchers</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">opts</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">$options</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">opts</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">props</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">initProps</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">opts</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">props</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">opts</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">methods</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">initMethods</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">opts</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">methods</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">opts</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">initData</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vm</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">observe</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{},</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">/* asRootData */</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">opts</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">computed</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">initComputed</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">opts</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">computed</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">opts</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">watch</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">opts</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">watch</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nativeWatch</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">initWatch</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">opts</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">watch</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><ul><li>computed 在 data 之后，所以不要在 data 中引用 computed 中的属性，只能得到 undefined。</li><li>data 可以调用 前面的 props、methods 的属性</li><li>computed 中可以调用 props，methods，data 中的属性</li></ul><table><thead><tr><th>类型</th><th>加载顺序</th><th>加载时间</th><th>写法</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>props</td><td>1</td><td>beforeCreated, created 之间</td><td>对象或数组</td><td>接收父组件传递的值</td><td></td></tr><tr><td>method</td><td>2</td><td>beforeCreated, created 之间</td><td>函数</td><td>提供相对复杂的数据计算和逻辑</td><td></td></tr><tr><td>data</td><td>3</td><td>beforeCreated, created 之间</td><td>对象或数组</td><td>定义和初始化数据</td><td></td></tr><tr><td>computed</td><td>4</td><td>beforeCreated, created 之间</td><td>函数</td><td>提供相对简单的数据计算</td><td></td></tr></tbody></table><h2 id="对应响应式环数据的处理-todo" tabindex="-1">对应响应式环数据的处理？todo <a class="header-anchor" href="#对应响应式环数据的处理-todo" aria-label="Permalink to &quot;对应响应式环数据的处理？todo&quot;">​</a></h2><p>data 里面声明了一个 a，引用了 dta 里面的 b</p><h2 id="keep-alive-是什么-实现原理" tabindex="-1">keep-alive 是什么，实现原理 <a class="header-anchor" href="#keep-alive-是什么-实现原理" aria-label="Permalink to &quot;keep-alive 是什么，实现原理&quot;">​</a></h2><ul><li><p><code>keep-alive</code> 是 vue 内置抽象组件，在组件实例建立父子关系会被忽略</p></li><li><p>在它的函数钩子 created 阶段，定义了 caches 对象、keys 数组来缓存已经创建的 vnode</p></li><li><p>keep-alive 还有一个 render 函数，渲染的时候，计算一个key，然后判断是否存在 cache 对象， 如果有就把缓存的vnode 插入到dom树，没有就把vnode 缓存到 caches 对象</p></li><li><p>生命周期：activated（激活）、deacitvated（冻结）</p></li><li><p><code>inclue</code>：字符串或者正则表达式。只有名称匹配的组件会被缓存</p></li><li><p><code>exclue</code>: 字符串或者正则表达式。任何名称匹配的组件都不会被缓存。</p></li><li><p><code>max</code>: 最多可以缓存多少组件实例。一旦这个数字达到了，在新实例被创建之前，已缓存组件中最久没有被访问的实例会被销毁掉。</p></li></ul><h2 id="vue-template-怎么理解" tabindex="-1">vue template 怎么理解 <a class="header-anchor" href="#vue-template-怎么理解" aria-label="Permalink to &quot;vue template 怎么理解&quot;">​</a></h2><p>vue 的模版语法，是一种描述视图的标记语言，通过 vue 的 vue-template-compiler 解析成 render 函数， 再通过 vnode 加上 diff 算法统一替换 dom 形成证实的视图，所以 vue 和 react 在本质上类似。 也就是说 vue 也可以和 react 一样通过 jsx 来描绘视图，不同的是 vue 提高了一套更符合前端思维的标记语言</p><p>生成jsx的语法糖，主要是用来生成描述页面的对象</p><h2 id="vue-router" tabindex="-1">vue-router <a class="header-anchor" href="#vue-router" aria-label="Permalink to &quot;vue-router&quot;">​</a></h2><p><strong>原理：</strong></p><ol><li><p>当用户执行 Vue.use(VueRouter) 的时候，实际上就是在执行 install 函数</p><ul><li>为 vue 的原型上注入 router</li><li>mixin beforeCreate</li><li>将router-link、router-view组件注册为vue全局组件</li></ul></li><li><p>router 安装最重重要的一步是利用 vue.mixin 方法，把 beforeCreate 和 destroyed 钩子函数注入到每一个组件中。</p></li><li><p>然后 根 vue 实例同时，会调用 beforeCreate 钩子，这里面执行</p><ul><li>调用 Vue.util.defineReactive 方法，把 router 变成响应式对象。（主要的）</li><li>然后赋值 _router，这样原型上就可以访问 $router</li><li>然后执行 _router.init() 初始化 router</li></ul></li><li><p>当 hash 或 history 更新后都触发 $router 的更新机制，调用实例的 vm.render() 方法进行重新渲染</p></li></ol><p><strong>hash 模式</strong></p><p>使用 window.location.hash 属性，以及 onhashchange 事件，可以实现监听浏览器地址 hash 值的变化，执行相应的js切换页面</p><p><strong>history 模式</strong></p><p>服务端 需要配置所有的路由都要重定向到根页面</p><p>nginx 配置到 根路径下面（qiankun 遇到过）</p><ul><li>H5的新API，pushState 和 replaceState 通过这两个 API 改变url地址不会发送请求。</li><li>同时还有 popstate 事件</li></ul><h2 id="vuex" tabindex="-1">vuex <a class="header-anchor" href="#vuex" aria-label="Permalink to &quot;vuex&quot;">​</a></h2><p>vuex的核心原理就是：</p><ol><li><p>在install阶段调用了 Vue.mixin() 方法，利用钩子函数 beofreCreate 给所有组件注册 $stroe，这样 在所有的页面上都能获取到this.$stroe的属性；</p></li><li><p>使用 resetStoreVM 方法生成了一个新的 vue 实例。</p><ul><li>并且把这个实例赋值给 store.vm</li><li>接下来又给这个实例的 data 上，赋值了 $$state 属性</li><li>$$state 的值就是 state，也就是我们定义到 state 上的数据</li><li>这样就保证了 state 上的数据被监控了，所以 state 里边的属性发生变化时，视图会更新;</li></ul></li></ol><p>当我们获取state上的数据的时候，实际上调用了stroe里的this._vm.data.$$state</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">store</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_vm </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Vue</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">$$state</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> state</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  computed</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">get</span></span>
<span class="line"><span style="color:#82AAFF;">state</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">_vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">$$state</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="virtual-虚拟-dom-的优势在哪里" tabindex="-1">Virtual（虚拟） Dom 的优势在哪里？ <a class="header-anchor" href="#virtual-虚拟-dom-的优势在哪里" aria-label="Permalink to &quot;Virtual（虚拟） Dom 的优势在哪里？&quot;">​</a></h2><p>首先：</p><ul><li>dom 引擎、js 引擎是相互独立的，但又在同一个线程里面（主线程）</li><li>js 代码调用 dom API 必须挂起 js 引擎，</li><li>传入参数数据等、然后 dom 引擎激活，DOM 重绘后可能与返回值</li><li>然后在激活 JS 引擎并继续执行类似频繁的 DOM API调用</li><li>且浏览器厂商做批量优化处理</li><li>引擎之前的频繁切换，若其中有强制重绘的 DOM API 调用，重新计算布局、重新绘制图像会增加更大的性能消耗</li></ul><p>其次是 VDOM 和真实 DOM 的区别和优化：</p><ol><li><p>虚拟 DOM 不会立马进行排版和重绘操作</p></li><li><p>虚拟 DOM 进行频繁修改后，然后一次性的比较并修改 DOM 中需要改的部分， 最后在真实 DOM 中进行排版与重绘，减少过多的 DOM 节点排版和重绘消耗</p></li><li><p>虚拟 DOM 有效的降低大面积真实 DOM 的重绘和排版，因为最后与真实 DOM 比较差异，可以只渲染局部</p></li></ol><h2 id="虚拟-dom-的优缺点" tabindex="-1">虚拟 DOM 的优缺点 <a class="header-anchor" href="#虚拟-dom-的优缺点" aria-label="Permalink to &quot;虚拟 DOM 的优缺点&quot;">​</a></h2><p>首先要阐述，dom 操作繁琐，已经频繁重绘重排的问题</p><ul><li>虚拟DOM的实现原理： <ul><li>虚拟DOM本质上是JavaScript对象,是对真实DOM的抽象</li><li>状态变更时，记录新树和旧树的差异</li><li>最后把差异更新到真正的dom中</li></ul></li></ul><p>优点：</p><ul><li><strong>保证性能下限</strong>： <ul><li>虚拟 DOM 可以经过 <code>diff</code> 找出最小差异，然后批量进行 <code>patch</code>，这种操作虽然比不上手动优化；</li><li>但是比起粗暴的DOM操作性能要好很多，因此虚拟 DOM 可以保证性能下限(你不需要手动优化的情况下，依然可以提供还不错的性能，即保证性能的下限；)</li></ul></li><li><strong>改善了大规模 DOM 操作的性能</strong><ul><li>虚拟 DOM 的 <code>diff</code> 和 <code>patch</code> 都是在一次更新中自动进行的，我们无需手动操作 DOM，极大提高开发效率</li></ul></li><li><strong>跨平台开发</strong><ul><li>较低的成本实现跨，虚拟 DOM 本质上是 JavaScript 对象，而 DOM 与平台强相关，相比之下虚拟 DOM 可以进行更方便地跨平台操作，例如服务器渲染、移动端开发等等平台开发 RN Wexx</li></ul></li><li><strong>规避了 XSS 风险</strong></li></ul><p>缺点：</p><ul><li>无法进行极致优化： <ul><li>在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化，比如 VScode 采用直接手动操作 DOM 的方式进行极端的性能优化</li><li>列表全量更新的场景，不需要diff，但是也会走 diff 的流程</li></ul></li><li>内存占用较高</li></ul><p><a href="https://www.zhihu.com/question/31809713" target="_blank" rel="noreferrer">尤雨溪回答</a></p><p>性能比较也要看场合：</p><p>不要天真地以为 Virtual DOM 就是快，diff 不是免费的，</p><p>最终 patch 的时候还不是要用原生 API。</p><p>在我看来 Virtual DOM 真正的价值从来都不是性能，而是它</p><ol><li>为函数式的 UI 编程方式打开了大门；</li><li>可以渲染到 DOM 以外的 平台（跨平台 backend），比如 ReactNative、wexx。</li></ol><h2 id="说下-vue-优化" tabindex="-1">说下 vue 优化 <a class="header-anchor" href="#说下-vue-优化" aria-label="Permalink to &quot;说下 vue 优化&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/6844903913410314247#heading-2" target="_blank" rel="noreferrer">Vue 项目性能优化 — 实践指南</a></li><li><a href="https://juejin.cn/post/6922641008106668045#heading-8" target="_blank" rel="noreferrer">黄老师的干货</a></li></ul>`,126),o=[e];function t(r,c,i,y,F,D){return n(),a("div",null,o)}const C=s(p,[["render",t]]);export{A as __pageData,C as default};
