import{_ as s,c as n,o as a,S as o}from"./chunks/framework.9c4db3f7.js";const e="/blog/assets/5-1.ca397db3.png",b=JSON.parse('{"title":"原型和原型链","description":"","frontmatter":{},"headers":[],"relativePath":"fe/js/5-原型和原型链.md","filePath":"fe/js/5-原型和原型链.md","lastUpdated":1692682474000}'),l={name:"fe/js/5-原型和原型链.md"},p=o(`<h1 id="原型和原型链" tabindex="-1">原型和原型链 <a class="header-anchor" href="#原型和原型链" aria-label="Permalink to &quot;原型和原型链&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">555 死记硬背一下内容：</p><ul><li>所有的引用类型（数组、对象、函数），都具有对象特性，即可自由扩展属性（null除外）</li><li>所有的引用类型（数组、对象、函数），都有一个 <code>__proto__</code> 属性，属性值是一个普通的对象</li><li>所有的函数，都有一个 <code>prototype</code> 属性，属性值也是一个普通的对象</li><li>所有的引用类型（数组、对象、函数），<code>__proto__</code> 属性值指向它的构造函数的 <code>prototype</code> 属性值</li><li>实例的隐式原型 === 构造函数的显示原型, 即：<code>person.__proto__ === Person.prototype</code>, person：实例，Person：构造函数</li><li>找一个引用类型的属性 找不到就找他爸(构造函数) 的prototype 再找不到就继续找他爷爷 一直 往上找 最后找到 Object.prototype.<strong>proto</strong> === n</li></ul><p><a href="https://zhuanlan.zhihu.com/p/22989691" target="_blank" rel="noreferrer">JavaScript 世界万物诞生记</a></p></div><h2 id="创建一个构造函数对象" tabindex="-1">创建一个构造函数对象 <a class="header-anchor" href="#创建一个构造函数对象" aria-label="Permalink to &quot;创建一个构造函数对象&quot;">​</a></h2><p>创建一个构造函数 Person</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> person </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">k</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name)  </span><span style="color:#676E95;font-style:italic;">// k</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Person 就是一个构造函数，使用 new 创建一个实例对象 person</p><h2 id="prototype" tabindex="-1">prototype <a class="header-anchor" href="#prototype" aria-label="Permalink to &quot;prototype&quot;">​</a></h2><p>每个<strong>函数</strong>都会有一个prototype。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">k</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 实例 person1</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> person1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 实例 person2</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> person2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(person1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// k</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(person2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// k</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>函数的 prototype 属性指向了一个对象 <code>Person.prototype</code> ，这个对象是调用该构造函数所创建的<strong>实例</strong>的原型， 也就是 person1 和 person2 的的原型</p><h2 id="什么是原型" tabindex="-1">什么是原型 <a class="header-anchor" href="#什么是原型" aria-label="Permalink to &quot;什么是原型&quot;">​</a></h2><p>每一个 JavaScript 对象（<code>null</code> 除外）在创建的时候就会与之关联另一个对象， 这个关联的对象就是我们所说的原型，每一个对象都会从原型继承属性</p><h3 id="实现一个没有原型的对象" tabindex="-1">实现一个没有原型的对象： <a class="header-anchor" href="#实现一个没有原型的对象" aria-label="Permalink to &quot;实现一个没有原型的对象：&quot;">​</a></h3><p><code>Object.create(null)</code></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> o </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(o)      </span><span style="color:#676E95;font-style:italic;">// {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">o</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">constructor       </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">o</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__         </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">o </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="什么是原型对象" tabindex="-1">什么是原型对象 <a class="header-anchor" href="#什么是原型对象" aria-label="Permalink to &quot;什么是原型对象&quot;">​</a></h2><p>原型对象就是 <code> Person.prototype</code></p><h3 id="constructor" tabindex="-1">constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;constructor&quot;">​</a></h3><p>每一个原型对象都会有一个 <code>constructor</code> 属性， 这个属性会指向 <code>prototype</code> 属性所在函数，也是就是构造函数 <code>Person</code></p><h3 id="proto" tabindex="-1"><strong>proto</strong> <a class="header-anchor" href="#proto" aria-label="Permalink to &quot;__proto__&quot;">​</a></h3><p>每个对象都有 <code>__proto__</code> 属性。但只有<strong>函数对象</strong>有 <code>prototype</code> 属性</p><p>所有函数对象的 <code>__proto__</code> 属性，都指向 <code>Function.prototype</code>，他是个空函数</p><p>所有对象的 <code>__proto__</code> ，都指向其构造器的 prototype</p><h2 id="构造函数与实例原型的之间的关系图" tabindex="-1">构造函数与实例原型的之间的关系图 <a class="header-anchor" href="#构造函数与实例原型的之间的关系图" aria-label="Permalink to &quot;构造函数与实例原型的之间的关系图&quot;">​</a></h2><p><img src="`+e+'" alt="prototype"></p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://github.com/mqyqingfeng/Blog/issues/2" target="_blank" rel="noreferrer">JavaScript深入之从原型到原型链</a></p>',27),r=[p];function t(c,i,y,A,D,d){return a(),n("div",null,r)}const u=s(l,[["render",t]]);export{b as __pageData,u as default};
